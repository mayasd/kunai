#!/usr/bin/env python

# Copyright (C) 2014:
#    Gabes Jean, naparuba@gmail.com


import optparse
import sys
import os
import re
import tempfile
import json
import imp
import signal
import socket
from StringIO import StringIO


sys.path.append('.')

from kunai.log import cprint, logger
from kunai import cli as cli_mod
from kunai.version import VERSION


logger.setLevel('WARNING')

banner = r'''
        ___           ___           ___           ___
       /__/|         /__/\         /__/\         /  /\        ___
      |  |:|         \  \:\        \  \:\       /  /::\      /  /\
      |  |:|          \  \:\        \  \:\     /  /:/\:\    /  /:/
    __|  |:|      ___  \  \:\   _____\__\:\   /  /:/~/::\  /__/::\
   /__/\_|:|____ /__/\  \__\:\ /__/::::::::\ /__/:/ /:/\:\ \__\/\:\__
   \  \:\/:::::/ \  \:\ /  /:/ \  \:\~~\~~\/ \  \:\/:/__\/    \  \:\/\
    \  \::/~~~~   \  \:\  /:/   \  \:\  ~~~   \  \::/          \__\::/
     \  \:\        \  \:\/:/     \  \:\        \  \:\          /__/:/
      \  \:\        \  \::/       \  \:\        \  \:\         \__\/
       \__\/         \__\/         \__\/         \__\/
'''



# Handle some signals
def sig_handler(signalnum, handle):
    """ Handle some signals """
    sys.exit(0)

signal.signal(signal.SIGTERM, sig_handler)
signal.signal(signal.SIGINT, sig_handler)


CONFIG = {}

class Dummy():
    def __init__(self):
        pass


if os.name != 'nt':
    DEFAULT_CFG = '/etc/kunai/local.json'
else:
    DEFAULT_CFG = 'c:\\kunai\\etc\\local.json'




# Commander is the main class for managing the CLI session and behavior
class CLICommander(object):
    def __init__(self, config, opts):
        self.keywords = {}
        
        self.config = config

        name = config.get('name', '%s' % socket.gethostname())
        log_dir = config.get('log', '/var/lib/kunai')
        log_level = config.get('log_level', 'INFO')
        # early set the logger part
        logger.load(log_dir, '(cli)')
        logger.setLevel(log_level)

        # We will now try to load the keywords from the modules
        self.load_cli_mods(opts)

    
    def load_cli_mods(self, opts):
        # Main list of keywords for the first parameter
        self.keywords.clear()
        
        # CLI are located in the kunai lib
        cli_mods_dir = os.path.dirname(os.path.abspath(cli_mod.__file__))
        
        logger.debug("Loading the cli directory %s" % cli_mods_dir)
        cli_mods_dirs = [os.path.join(cli_mods_dir, d) for d in os.listdir(cli_mods_dir) if os.path.isdir(os.path.join(cli_mods_dir, d))]

        # Link the CONFIG objet into the common
        # cli mod
        cli_mod.CONFIG = self.config
        
        for d in cli_mods_dirs:
            f = os.path.join(d, 'cli.py')
            if os.path.exists(f):
                dname = os.path.split(d)[1]
                # Let's load it, but first att it to sys.path
                sys.path.append(d)
                # Load this PATH/cli.py file
                m = imp.load_source(dname, f)
                exports = getattr(m, 'exports', {})
                for (f, v) in exports.iteritems():
                    m_keywords = v.get('keywords', [])
                    sub_cmd = 'global'
                    k = m_keywords[0]
                    if len(m_keywords) >= 2:
                        k = m_keywords[1]
                        sub_cmd = m_keywords[0]
                    e = {'f': f,
                         'args': v.get('args', []),
                         'description': v.get('description', ''),
                         'came_from': sub_cmd}
                    if not sub_cmd in self.keywords:
                        self.keywords[sub_cmd] = {}
                    # Finally save it
                    self.keywords[sub_cmd][k] = e

        logger.debug('We load the keywords %s' % self.keywords)
    
        
    # Execute a function based on the command line
    def one_loop(self, command_args):
        logger.debug("ARGS: %s" % command_args)
        sub_cmd = 'global'
        keyword = ''
        
        # cannot be void because if so won't be in this loop
        if len(command_args) == 1:
            keyword = command_args.pop(0)
        else:
            sub_cmd = command_args.pop(0)
            keyword = command_args.pop(0)
            
        d = self.keywords.get(sub_cmd, None)
        if d is None:
            logger.error('Unknown sub command %s' % sub_cmd)
            return
            
        mod = d.get(keyword, None)
        if mod is None:
            if sub_cmd == 'global':
                if keyword in self.keywords:
                    # ok it's a known sub part, like collectors, just
                    # print it's own sub commands
                    self.print_list(keyword)                    
                else:
                    logger.error("UNKNOWN command %s" % keyword)
            else:
                logger.error("UNKNOWN command %s" % keyword)
            return

        # Now prepare a new parser, for the command call this time
        command_parser = optparse.OptionParser(
            '',
            version="%prog " + VERSION)
        command_parser.prog = keyword

        f_args = []
        for a in mod.get('args', []):
            n = a.get('name', None)
            if n is None:
                continue
            default = a.get('default', Dummy())
            description = a.get('description', '')
            _type = a.get('type', 'standard')
            if n.startswith('-'):
                # Get a clean version of the parameter, without - or --
                dest = n[1:]
                if dest.startswith('-'):
                    dest = dest[1:]
                # And if the parameter is like download-only, map it to
                # download_only
                dest = dest.replace('-', '_')
                # add_option parameters, common ones
                d = {'action':'store_true', 'dest':dest, 'help':(description)}
                # If bool setup it
                if _type == 'bool':
                    d['action'] = 'store_true'
                # and if we got a real default, use it
                if not isinstance(default, Dummy):
                    d['default'] = default
                command_parser.add_option(n, **d)

        cmd_opts, cmd_args = command_parser.parse_args(command_args)
        f = mod.get('f', None)
        logger.debug("CALLING" + str(f) + "WITH" + str(cmd_args) + "and" + str(cmd_opts) + str(type(cmd_opts)) + str(dir(cmd_opts)))
        f(*cmd_args, **cmd_opts.__dict__)

    
    def print_list(self, keyword=''):
        print "Available commands:"
        all_from = {}
        sub_cmds = self.keywords.keys()
        sub_cmds.remove('global')
        sub_cmds.sort()
        sub_cmds.insert(0, 'global')
        
        for cmd in sub_cmds:
            # If we did filter a specific keyword, bailout this
            # one
            if keyword and cmd != keyword:
                continue
            prefix = cmd
            if cmd == 'global':
                prefix = ''
            d = self.keywords[cmd]
            cprint('%s:' % cmd, color='blue')
            cmds = d.keys()
            cmds.sort()
            for k in cmds:
                m = d[k]
                s = k.ljust(15)
                if prefix:
                    s = '%s %s' % (prefix, k)
                    s = s.ljust(15)
                cprint('\t%s ' % s, 'green', end='')
                cprint(': %s' % m['description'])
        return

    
    
if __name__ == '__main__':
    parser = optparse.OptionParser(
        '',
        version="%prog " + VERSION,
        add_help_option=False)
    parser.add_option('--proxy', dest="proxy",
                      help="""Proxy URI. Like http://user:password@proxy-server:3128""")
    parser.add_option('-l', '--list', action='store_true',
                      dest="do_list", help=("List available commands"))
    parser.add_option('-D', action='store_true',
                      dest="do_debug", help=("Enable the debug mode"))
    parser.add_option('-c', '--config', dest="jsonconfig", default=DEFAULT_CFG,
                      help=("Path to your local.json file. Default: %s" % DEFAULT_CFG))
    parser.add_option('-v', action='store_true',
                      dest="do_verbose", help=("Be more verbose"))
    parser.add_option('-h', '--help', action='store_true',
                      dest="do_help", help=("Print help"))

    # First parsing, for purely internal parameters, but disable
    # errors, because we only want to see the -D -v things
    old_error = parser.error
    parser.error = lambda x: 1
    opts, args = parser.parse_args()
    # reenable the errors for later use
    parser.error = old_error

    do_help = opts.do_help
    if do_help and len(args) == 0:
        parser.print_help()
        sys.exit(0)

    if opts.do_verbose:
        logger.setLevel('INFO')

    if opts.do_debug:
        logger.setLevel('DEBUG')
    
    cfg = None
    if not os.path.exists(opts.jsonconfig):
        logger.debug('Missing configuration file!')
    else:
        try:
            with open(opts.jsonconfig, 'r') as f:
                CONFIG = json.load(f)
            logger.debug("Loaded configuration file %s : %s" %(opts.jsonconfig, CONFIG))
        except Exception, exp:
            logger.error('Cannot load configuration file %s: %s' % (opts.jsonconfig, exp))
            sys.exit(2)

    CLI = CLICommander(CONFIG, opts)

    # Reset levels if cli setup it
    if opts.do_verbose:
        logger.setLevel('INFO')    
    if opts.do_debug:
        logger.setLevel('DEBUG')

    # We should look on the sys.argv if we find a valid keywords to
    # call in one loop or not.
    def hack_sys_argv():
        command_values = []
        internal_values = []
        
        founded = False
        globals_keys = CLI.keywords['global'].keys()
        for arg in sys.argv:
            
            # Maybe it's a global one
            if not founded and arg in globals_keys:
                founded = True
                command_values.insert(0, 'global')
            if arg in CLI.keywords:
                founded = True
            # Did we found it?
            if founded:
                command_values.append(arg)
            else:  # ok still not, it's for the shinekn command so
                internal_values.append(arg)

        logger.debug('Internal args %s' % internal_values)
        logger.debug('Command values %s' % command_values)
        sys.argv = internal_values
        return command_values

    # We will remove specific commands from the sys.argv list and keep
    # them for parsing them after
    command_args = hack_sys_argv()

    # Global command parsing, with the error enabled this time
    opts, args = parser.parse_args()
    
    logger.debug('CLI ARGS: %s' % args)

    if opts.do_help:
        if len(command_args) == 0:
            logger.error("Cannot find any help for you")
            sys.exit(1)
        sub_cmd = command_args.pop(0)
        a = command_args.pop(0)
        if a not in CLI.keywords[sub_cmd]:
            logger.error("Cannot find any help for %s" % a)
            sys.exit(1)
        cprint('%s' % a, 'green')
        for arg in CLI.keywords[sub_cmd][a]['args']:
            n = arg.get('name', '')
            desc = arg.get('description', '')
            cprint('\t%s' % n.ljust(10), 'green', end='')
            cprint(': %s' % desc)

        sys.exit(0)

    # Maybe he/she just want to list our commands?
    if opts.do_list:
        CLI.print_list()
        sys.exit(0)

    # if just call kunai, we must show the available commands
    if len(command_args) == 0:
        cprint(banner, color='blue')
        parser.print_help()
        CLI.print_list()
        sys.exit(0)

    # If it's just a one call shot, do it!
    CLI.one_loop(command_args)
